# keycloak

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/:add

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP="https://eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com:443/saml-app/"/:add(sslPolicy=EXTERNAL,logoutPage="SPECIFY YOUR LOGOUT PAGE!"

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP="https://eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com:443/saml-app/"/Key=KEY1:add(signing=true, \
PrivateKeyPem="PRIVATE KEY NOT SET UP OR KNOWN", \
CertificatePem="MIIEUzCCAjsCFEf4oN6O/DY1EcfHojbrGqAE5BXEMA0GCSqGSIb3DQEBCwUAMEcxCzAJBgNVBAYTAkNaMQswCQYDVQQIDAJDWjENMAsGA1UEBwwEQnJubzELMAkGA1UECgwCUUUxDzANBgNVBAMMBnh0Zi5jYTAeFw0yMzAyMTMxNDQwMjVaFw0yNDAyMTMxNDQwMjVaMIGEMQswCQYDVQQGEwJDWjELMAkGA1UECBMCQ1oxDTALBgNVBAcTBEJybm8xDDAKBgNVBAoTA1hURjELMAkGA1UECxMCVEYxPjA8BgNVBAMTNWVhcC10Ym9yZ2F0bzIuYXBwcy50Ym9yZ2F0by12bmFoLmVhcHFlLnBzaS5yZWRoYXQuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvDQqN/QQfmPLi15w0F5l0BkQGYHSbOE2pW3gSgYa82XZzP2BK15XpSSwCjWPjHxvty0Brbt51y56zBVQaHlFuRCtBc0gaPpEluDeCv9leIDzZZV85+fUEhkWoosgI3wQePfqAr23FohSElrYNNqg/ozzlD1IhmUdLoJKt8CE/55JiYeito30hEncSb0s0qtPv/h6TO2UPHDXA3JoG3/DchQGFBNNW1Eil4z78ej1rpn32Ibk1u0r+7E5MWzYg5VnjIf2oqAOoPV2OqMqAVVKrLgR1diTnTynQ/EcGLuyJoNzOHLPVm4WYmbZoYGqSP4UM4B9AgdWwyjuBcuHGBc6vwIDAQABMA0GCSqGSIb3DQEBCwUAA4ICAQBGhTM7rxOMCkd8AIns4Z1EbdomRJUT4sEHjj0XyBx8QW2747XbgcjT7U5QC9srkNSM+XTFsbYVvtQteqvOMhja7ThqZSHWcKHedV9zylD/izz4bEkLHyOVI78ZUVyOKnQ7rvcTLgVkoTWqlP4cj+COB7mY/UWrsL4minQo6Bouz00b+sNPM85DOKMV466F5K33eE091z1NTXvFirfW3N5E6qwengHc1eTxP2wprNo1bGWSSgGTsM2jqIOi10/kOLkCcq45Rirfre5ReWYtBShvb2+xPqFmvUT8XvZZtqOLprheXVSz9me4KcWq0tZBsxy8VSXUASsmpud6YYJHar+2hOVnwCVb+LcEF2SxIasAEuSy1NurlB85Is96txFTAcRAsGXLf/gljZC1iEU5CoDAlKocGP0AtMri9ssRXFxEBEmxt+nj3zm8Fms+G/Yu4pDp2yRDE1umXKI+CejnJzwWWSmirY6DnQTZphAj6iTC64pB7vef36hRZbo9WMitB3YyywqTOb+UhT4z7TmRH2sUNhii6XC5vIF53j3CsH2JPIrjRQS/bKaA4bMulr95XeYGn19nPJFQ6pHmva90ljxeaJA99ZLiX+jeMBzk9M9LKBjwshkx7qfH8VW5WxAmu5skcS/uAru4q81srg5juhn8OF1Npl6oqpJiAnxIFm/ODA==")

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP="https://eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com:443/saml-app/"/IDP=idp/:add( \
    SingleSignOnService={ \
        signRequest=true, \
        validateResponseSignature=true, \
        validateAssertionSignature=false, \
        requestBinding=POST, \
        bindingUrl=http://sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml}, \
    SingleLogoutService={ \
        signRequest=true, \
        signResponse=true, \
        validateRequestSignature=true, \
        validateResponseSignature=true, \
        requestBinding=POST, \
        responseBinding=POST, \
        postBindingUrl=http://sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml, \
        redirectBindingUrl=http://sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml} \
)

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP="https://eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com:443/saml-app/"/IDP=idp/:write-attribute(name=signatureAlgorithm,value=RSA_SHA256)

/subsystem=keycloak-saml/secure-deployment=YOUR-WAR.war/SP="https://eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com:443/saml-app/"/IDP=idp/:write-attribute(name=signatureCanonicalizationMethod,value=http://www.w3.org/2001/10/xml-exc-c14n#)



# cli generated by

if (outcome != success) of /subsystem=ee/service=default-bindings:read-resource
  /subsystem=ee/service=default-bindings:add
end-if

if (outcome == success) of /subsystem=elytron:read-resource
  /subsystem=elytron/key-store="LocalhostKeyStore":add(credential-reference={clear-text="password"}, path="/etc/eap-secret-volume/eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com.keystore")
else
  echo "Cannot configure Elytron Key Store. The Elytron subsystem is not present in the server configuration file." >> ${error_file}
  quit
end-if
if (outcome == success) of /subsystem=elytron:read-resource
  /subsystem=elytron/key-manager="LocalhostKeyManager":add(key-store="LocalhostKeyStore", credential-reference={clear-text="password"})
else
  echo "Cannot configure Elytron Key Manager. The Elytron subsystem is not present in the server configuration file." >> ${error_file}
end-if
if (outcome == success) of /subsystem=elytron:read-resource
  /subsystem=elytron/server-ssl-context="LocalhostSslContext":add(key-manager="LocalhostKeyManager")
else
  echo "Cannot configure Elytron Server SSL Context. The Elytron subsystem is not present in the server configuration file." >> ${error_file}
end-if
  for serverName in /subsystem=undertow:read-children-names(child-type=server)
      if (result == []) of /subsystem=undertow/server=$serverName:read-children-names(child-type=https-listener)
        /subsystem=undertow/server=$serverName/https-listener="https":add(ssl-context="LocalhostSslContext", socket-binding="https", proxy-address-forwarding="true")
      else
        echo There is already an undertow https-listener for the '$serverName' server so we are not adding it >> ${warning_file}
      end-if
  done
if (outcome == success) of /subsystem=elytron:read-resource
  /subsystem=elytron/key-store="jgroups.jceks":add(credential-reference={clear-text="xpaasQEpassword"}, path="/etc/jgroups-encrypt-secret-volume/jgroups.jceks", type="JCEKS")
else
  echo "Cannot configure Elytron Key Store. The Elytron subsystem is not present in the server configuration file." >> ${error_file}
  quit
end-if

if (outcome == success) of /subsystem=jgroups/stack="tcp"/protocol="SYM_ENCRYPT":read-resource
    echo Cannot configure jgroups 'SYM_ENCRYPT' protocol under 'tcp' stack. This protocol is already configured. >> ${error_file}
    quit
end-if
if (outcome != success) of /subsystem=jgroups/stack="tcp"/protocol="SYM_ENCRYPT":read-resource
    batch
        /subsystem=jgroups/stack=tcp/protocol=SYM_ENCRYPT:add(add-index=5, key-store="jgroups.jceks", key-alias="secret-key", key-credential-reference={clear-text="xpaasQEpassword"})
   run-batch
end-if
if (outcome == success) of /subsystem=jgroups/stack="udp"/protocol="SYM_ENCRYPT":read-resource
    echo Cannot configure jgroups 'SYM_ENCRYPT' protocol under 'udp' stack. This protocol is already configured. >> ${error_file}
    quit
end-if
if (outcome != success) of /subsystem=jgroups/stack="udp"/protocol="SYM_ENCRYPT":read-resource
    batch
        /subsystem=jgroups/stack=udp/protocol=SYM_ENCRYPT:add(add-index=5, key-store="jgroups.jceks", key-alias="secret-key", key-credential-reference={clear-text="xpaasQEpassword"})
   run-batch
end-if

if (outcome == success) of /subsystem=jgroups/stack="tcp"/protocol="dns.DNS_PING":read-resource
    echo Cannot configure jgroups 'dns.DNS_PING' protocol under 'tcp' stack. This protocol is already configured. >> ${error_file}
    quit
end-if
if (outcome != success) of /subsystem=jgroups/stack="tcp"/protocol="dns.DNS_PING":read-resource
    batch
        /subsystem=jgroups/stack=tcp/protocol=dns.DNS_PING:add(add-index=0)
        /subsystem=jgroups/stack=tcp/protocol=dns.DNS_PING:write-attribute(name=properties, value={dns_query="eap-ping", async_discovery_use_separate_thread_per_request=true})
   run-batch
end-if
if (outcome == success) of /subsystem=jgroups/stack="udp"/protocol="dns.DNS_PING":read-resource
    echo Cannot configure jgroups 'dns.DNS_PING' protocol under 'udp' stack. This protocol is already configured. >> ${error_file}
    quit
end-if
if (outcome != success) of /subsystem=jgroups/stack="udp"/protocol="dns.DNS_PING":read-resource
    batch
        /subsystem=jgroups/stack=udp/protocol=dns.DNS_PING:add(add-index=0)
        /subsystem=jgroups/stack=udp/protocol=dns.DNS_PING:write-attribute(name=properties, value={dns_query="eap-ping", async_discovery_use_separate_thread_per_request=true})
   run-batch
end-if

if (outcome != success) of /subsystem=elytron:read-resource
    echo You have set environment variables to enable sso. Fix your configuration to contain elytron subsystem for this to happen. >> ${error_file}
    quit
end-if
if (outcome != success) of /subsystem=undertow:read-resource
    echo You have set environment variables to enable sso. Fix your configuration to contain undertow subsystem for this to happen. >> ${error_file}
    quit
end-if
if (outcome == success) of /subsystem=undertow/application-security-domain=keycloak:read-resource
    echo Undertow already contains keycloak application security domain. Fix your configuration or set SSO_SECURITY_DOMAIN env variable. >> ${error_file}
    quit
end-if

if (outcome != success) of /extension=org.keycloak.keycloak-saml-adapter-subsystem:read-resource
    /extension=org.keycloak.keycloak-saml-adapter-subsystem:add()
end-if

if (outcome != success) of /subsystem=elytron/custom-realm=KeycloakSAMLRealm-1676299387:read-resource
    /subsystem=elytron/custom-realm=KeycloakSAMLRealm-1676299387:add(class-name=org.keycloak.adapters.saml.elytron.KeycloakSecurityRealm, module=org.keycloak.keycloak-saml-wildfly-elytron-adapter)
else
    echo Keycloak SAML Realm already installed >> ${warning_file}
end-if
if (outcome != success) of /subsystem=elytron/security-domain=KeycloakDomain-1676299387:read-resource
    /subsystem=elytron/security-domain=KeycloakDomain-1676299387:add(default-realm=KeycloakSAMLRealm-1676299387,permission-mapper=default-permission-mapper,security-event-listener=local-audit,realms=[{realm=KeycloakSAMLRealm-1676299387}])
else
    echo Keycloak Security Domain already installed. Trying to install Keycloak SAML Realm. >> ${warning_file}
    /subsystem=elytron/security-domain=KeycloakDomain-1676299387:list-add(name=realms, value={realm=KeycloakSAMLRealm-1676299387})
end-if
if (outcome != success) of /subsystem=elytron/constant-realm-mapper=keycloak-saml-realm-mapper-1676299387:read-resource
    /subsystem=elytron/constant-realm-mapper=keycloak-saml-realm-mapper-1676299387:add(realm-name=KeycloakSAMLRealm-1676299387)
else
    echo Keycloak SAML Realm Mapper already installed >> ${warning_file}
end-if
if (outcome != success) of /subsystem=elytron/service-loader-http-server-mechanism-factory=keycloak-saml-http-server-mechanism-factory-1676299387:read-resource
    /subsystem=elytron/service-loader-http-server-mechanism-factory=keycloak-saml-http-server-mechanism-factory-1676299387:add(module=org.keycloak.keycloak-saml-wildfly-elytron-adapter)
else
    echo Keycloak SAML HTTP Mechanism Factory already installed >> ${warning_file}
end-if
if (outcome != success) of /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory-1676299387:read-resource
    /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory-1676299387:add(http-server-mechanism-factories=[keycloak-saml-http-server-mechanism-factory-1676299387, global])
else
    echo Keycloak HTTP Mechanism Factory already installed. Trying to install Keycloak SAML HTTP Mechanism Factory. >> ${warning_file}
    /subsystem=elytron/aggregate-http-server-mechanism-factory=keycloak-http-server-mechanism-factory-1676299387:list-add(name=http-server-mechanism-factories, value=keycloak-saml-http-server-mechanism-factory-1676299387)
end-if
if (outcome != success) of /subsystem=elytron/http-authentication-factory=keycloak-http-authentication-1676299387:read-resource
    /subsystem=elytron/http-authentication-factory=keycloak-http-authentication-1676299387:add(security-domain=KeycloakDomain-1676299387,http-server-mechanism-factory=keycloak-http-server-mechanism-factory-1676299387,mechanism-configurations=[{mechanism-name=KEYCLOAK-SAML,mechanism-realm-configurations=[{realm-name=KeycloakSAMLCRealm-1676299387,realm-mapper=keycloak-saml-realm-mapper-1676299387}]}])
else
    echo Keycloak HTTP Authentication Factory already installed. Trying to install Keycloak SAML Mechanism Configuration >> ${warning_file}
    /subsystem=elytron/http-authentication-factory=keycloak-http-authentication-1676299387:list-add(name=mechanism-configurations, value={mechanism-name=KEYCLOAK-SAML,mechanism-realm-configurations=[{realm-name=KeycloakSAMLRealm-1676299387,realm-mapper=keycloak-saml-realm-mapper-1676299387}]})
end-if


if (outcome != success) of /subsystem=keycloak-saml:read-resource
    /subsystem=keycloak-saml:add()
end-if

/subsystem=keycloak-saml/secure-deployment=saml-app.war:add()
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app:add(sslPolicy=EXTERNAL)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:add(signing=true,encryption=true)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/IDP=idp:add(signatureAlgorithm=RSA_SHA256,               signatureCanonicalizationMethod="http://www.w3.org/2001/10/xml-exc-c14n#", SingleSignOnService={signRequest=true,requestBinding=POST,              bindingUrl=https://secure-sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml,validateSignature=true},              SingleLogoutService={validateRequestSignature=true,validateResponseSignature=true,signRequest=true,              signResponse=true,requestBinding=POST,responseBinding=POST, postBindingUrl=https://secure-sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml,              redirectBindingUrl=https://secure-sso-app-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com/auth/realms/eap-realm/protocol/saml})
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/IDP=idp/Key=Key:add(signing=true,CertificatePem="MIICoTCCAYkCBgGGSzggTTANBgkqhkiG9w0BAQsFADAUMRIwEAYDVQQDDAllYXAtcmVhbG0wHhcNMjMwMjEzMTQzODM0WhcNMzMwMjEzMTQ0MDE0WjAUMRIwEAYDVQQDDAllYXAtcmVhbG0wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDJOvlanpgK4VU3hCSbcSk2e3fahxxSpaXTrAQ8BJRDtPimx/89EWRbhHwPkJ3UQODqmgwJ3jJGGMO6iLJOa/kJJ86zGO8KQplDQO52fZtpgjxcVNz+8UDn4FhepWGQVaLr79+sem8sr36hVDisXBBn7zXJ95EQs9f2jjtOL8sy10FXzSalHA0a8pS1uXmHnFEhv2i70BzxqKFBDTDT0WB3rgLDxoSCJG+QEV6Jf1uMZkwM2g7U/Tn9CFQ1teG02AN/C7+8uZGZzQJdZSOr/wBmPYMV4123tMvhSKyHXgf+hka6XnS98NB8WuRIUbV9GDPKdhf7lUpWRHKO53ETkSbHAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAJZ8GvJzkL/yWZL/liNBMY0HkssgGbEFdoBjDzBHUGKWLS2QWei94XDTOXUZ7LH215KDrvC18QUVfCfTWOx8Mz7trCNQitB6DxU8oY2ZAp80X8B8YzYWQAI9NpbNOVqdPOR+zyU7jGU1B7Uz983VjeciIFcc8RGsixcFRICjXxXD0DZ0ipn4M73B2yfWKwQz14bWKquiRF/R8hB83NPJIC0l7M3zsyfxaKuGAlrEFy4R7fsrvNcM7FO/D0t9unjjFEEHveljmZYhe9ng/Zn3Q0P7aWbFLsZJZRN5ezUcX+8Sy+vZ8iqQv+bxXdJFBNMQMw9BSoZA9PuoKKQuQO0TRM4=")
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:write-attribute(name=KeyStore.file,value=/etc/sso-saml-secret-volume/eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com.keystore)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:write-attribute(name=KeyStore.password,value=password)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:write-attribute(name=KeyStore.PrivateKey-password,value=password)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:write-attribute(name=KeyStore.Certificate-alias,value=eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app/Key=Key:write-attribute(name=KeyStore.PrivateKey-alias,value=eap-tborgato2.apps.tborgato-vnah.eapqe.psi.redhat.com)
/subsystem=keycloak-saml/secure-deployment=saml-app.war/SP=eap-saml-app:write-attribute(name=logoutPage,value=/index.jsp)

 if (outcome == success) of /subsystem=elytron/http-authentication-factory=keycloak-http-authentication-1676299387:read-resource
   /subsystem=elytron/security-domain=ext-KeycloakDomain-1676299387:add(default-realm=ApplicationRealm,      permission-mapper=default-permission-mapper,security-event-listener=local-audit,      realms=[{realm=local},{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=KeycloakSAMLRealm-1676299387}])
   /subsystem=elytron/http-authentication-factory=ext-keycloak-http-authentication-1676299387:add(      security-domain=ext-KeycloakDomain-1676299387,http-server-mechanism-factory=keycloak-http-server-mechanism-factory-1676299387,      mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]},      {mechanism-name=FORM},{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]},      {mechanism-name=CLIENT_CERT},{mechanism-name=KEYCLOAK-SAML,mechanism-realm-configurations=[       {realm-name=KeycloakSAMLCRealm-1676299387,realm-mapper=keycloak-saml-realm-mapper-1676299387}]}])
   /subsystem=undertow/application-security-domain=other:remove
   /subsystem=undertow/application-security-domain=other:add(http-authentication-factory=ext-keycloak-http-authentication-1676299387)
   echo Existing other application-security-domain is extended with support for keycloak >> ${warning_file}
 end-if

if (outcome == success) of /subsystem=elytron/http-authentication-factory=keycloak-http-authentication-1676299387:read-resource
    /subsystem=undertow/application-security-domain=keycloak:add(http-authentication-factory=keycloak-http-authentication-1676299387)
else
    echo Undertow not configured, no keycloak-http-authentication-1676299387 found, keycloak subsystems must have been already configured. >> ${warning_file}
end-if
if (outcome != success) of /subsystem=ejb3/service=timer-service:read-resource
  batch
  /subsystem=ejb3/service=timer-service:add(thread-pool-name=default, default-data-store=default-file-store)
  /subsystem=ejb3/service=timer-service/file-data-store=default-file-store:add(path=timer-service-data, relative-to=jboss.server.data.dir)
  run-batch
end-if